This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-12T13:41:17.657Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
- Pay special attention to the Repository Description. These contain important context and guidelines specific to this project.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
- Code comments have been removed.

Additional Info:
----------------
User Provided Header:
-----------------------
git-apps source code

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
nop/
  nop copy.js
  nop.js
  simple-runner.js
nop-test/
  about.md
  processors-config.ttl
  transmissions.ttl
processors/
  GitHubList_no-pag.js
  GitHubList.js
  GitHubProcessorsFactory.js
.env.example
about.md
github-list-pipeline-runner.js
github-list-runner.js
github-list-transmission.ttl
package.json
processors-config.ttl
transmissions.ttl

================================================================
Repository Files
================================================================

================
File: nop/nop copy.js
================
import logger from '../../utils/Logger.js'


import NOP from '../../processors/util/NOP.js'
logger.log('NOP simple')

const config = {
    "runmode": "functions",
    whiteboard: []
}

const p10 = new NOP(config)
p10.id = 'http://purls.org/stuff/#p10'


var message = {
    "test": "test string",
    "dataDir": "src/applications/env-loader-test/data",
    "rootDir": "[no key]",
    "tags": "SM"
}




message = await p10.execute(message)

logger.log('p10 output ' + message)

================
File: nop/nop.js
================
import NOP from '../../processors/util/NOP.js'

const config = {
    "runmode": "functions",
    whiteboard: []
}

const nop = new NOP(config)

var message = { 'value': '42' }

message = await nop.execute(message)

console.log('value = ' + message.value)

================
File: nop/simple-runner.js
================
import NOP from '../../processors/util/NOP.js'
import Fork from '../../processors/util/Fork.js'








async function main() {
    const config = {}
    const nop = new NOP(config)
    const fork = new Fork(config)

    var message = { 'value': '42' }



    var outputs = await nop.execute(message)
    console.log('NOP outputs:', outputs)


    message.nForks = 3
    outputs = await fork.execute(message)
    console.log('Fork outputs:', outputs)
}

main().catch(console.error)

================
File: nop-test/about.md
================
# nop

## Description

minimal for comparing with simple runner

---

- Goal : a tool to recursively read local filesystem directories, checking for files with the `.md` extension to identify collections of such
- Goal : documentation of the app creation process
- Implementation : a #Transmissions application
- SoftGoal : reusability
- _non-goal_ - efficiency

================
File: nop-test/processors-config.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> .
# @prefix fs: <http://purl.org/stuff/filesystem/> .
@prefix t: <http://hyperdata.it/transmissions/> . # for custom terms & instances

t:walkPrep a trm:ReMap ;
    trm:rename (t:pp1 t:pp2) . # consider using blank nodes
    t:pp1   trm:pre     "content" ;
            trm:post    "template"  .
    t:pp2   trm:pre     "entryContentMeta.sourceDir" ;
            trm:post    "sourceDir" .

================
File: nop-test/transmissions.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> .
@prefix : <http://hyperdata.it/transmissions/> . # for custom terms & instances

#############################################################
# insert into pipe for debugging
:DE a :DeadEnd . # ends the current pipe quietly
:H  a :Halt . # kills everything 
:SC a :ShowConfig . # verbose report, continues pipe
:SM a :ShowMessage . # verbose report, continues pipe
:N  a :NOP . # no operation (except for showing stage in pipe)
:UF a :Unfork . # collapses all pipes but one 
#############################################################

:nope a trm:Pipeline ;
    trm:pipe (:N :SC :SM) .

================
File: processors/GitHubList_no-pag.js
================
import { Octokit } from '@octokit/rest';
import dotenv from 'dotenv';
import ProcessProcessor from '../../../../transmissions/src/processors/base/ProcessProcessor.js';
import logger from '../../../../transmissions/src/utils/Logger.js';

dotenv.config({ path: './trans-apps/applications/git-apps/.env' });

class GitHubList extends ProcessProcessor {
    constructor(config) {
        super(config);
        logger.debug('GitHubList constructor called');
        this.octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
        logger.debug('Octokit instance created');
    }

    async execute(message) {
        logger.debug('GitHubList execute method called');
        logger.debug('Input message:', JSON.stringify(message, null, 2));

        if (!message.github || !message.github.name) {
            logger.error('GitHub username not provided in the message');
            throw new Error('GitHub username not provided in the message');
        }

        const username = message.github.name;
        logger.debug(`Fetching repositories for username: ${username}`);

        try {
            logger.debug('Calling GitHub API');
            const { data } = await this.octokit.repos.listForUser({ username });
            logger.debug(`Fetched ${data.length} repositories`);

            const repositories = data.map(repo => repo.name);
            logger.debug('Extracted repository names:' + repositories);

            message.github.repositories = repositories;
            logger.debug('Updated message:', JSON.stringify(message, null, 2));

            this.emit('message', message);
            logger.debug('Emitted updated message');
        } catch (error) {
            logger.error(`Error fetching repositories for ${username}:`, error);
            logger.debug('Error details:', JSON.stringify(error, null, 2));
            if (error.status === 403) {
                logger.warn('Possible rate limit exceeded. Check GitHub API rate limits.');
            }
            throw error;
        }
    }
}

export default GitHubList;

================
File: processors/GitHubList.js
================
import { Octokit } from '@octokit/rest';
import dotenv from 'dotenv';
import ProcessProcessor from '../../../../transmissions/src/processors/base/ProcessProcessor.js';
import logger from '../../../../transmissions/src/utils/Logger.js';

dotenv.config({ path: './trans-apps/applications/git-apps/.env' });

class GitHubList extends ProcessProcessor {
    constructor(config) {
        super(config);
        logger.debug('GitHubList constructor called');
        this.octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
        logger.debug('Octokit instance created');
    }

    async execute(message) {
        logger.debug('GitHubList execute method called');
        logger.debug('Input message: ' + JSON.stringify(message, null, 2));

        if (!message.github || !message.github.name) {
            logger.error('GitHub username not provided in the message');
            throw new Error('GitHub username not provided in the message');
        }

        const username = message.github.name;
        logger.debug(`Fetching repositories for username: ${username}`);

        try {
            logger.debug('Calling GitHub API with pagination');
            const repositories = await this.fetchAllRepositories(username);
            logger.debug(`Fetched ${repositories.length} repositories`);

            message.github.repositories = repositories;
            logger.debug('Updated message:' + JSON.stringify(message, null, 2));

            this.emit('message', message);
            logger.debug('Emitted updated message');
        } catch (error) {
            this.handleError(error, username);
        }
    }

    async fetchAllRepositories(username) {
        const repositories = [];
        let page = 1;
        const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

        while (true) {
            try {
                const response = await this.octokit.repos.listForUser({
                    username,
                    per_page: 100,
                    page: page
                });

                repositories.push(...response.data.map(repo => repo.name));
                logger.debug(`Fetched page ${page} with ${response.data.length} repositories`);

                this.checkRateLimit(response.headers);

                if (response.data.length < 100) break;
                page++;

                await delay(1000);
            } catch (error) {
                throw this.createDetailedError(error, 'Error fetching repositories page');
            }
        }

        return repositories;
    }

    checkRateLimit(headers) {
        const remaining = headers['x-ratelimit-remaining'];
        const resetTime = new Date(headers['x-ratelimit-reset'] * 1000);
        logger.info(`Rate limit remaining: ${remaining}, Reset time: ${resetTime}`);

        if (remaining < 10) {
            logger.warn(`Rate limit is low. Only ${remaining} requests left. Reset at ${resetTime}`);
        }
    }

    createDetailedError(error, message) {
        const detailedError = new Error(`${message}: ${error.message}`);
        detailedError.status = error.status;
        detailedError.response = error.response;
        return detailedError;
    }

    handleError(error, username) {
        logger.error(`Error fetching repositories for ${username}:`, error.message);
        logger.debug('Error details:', JSON.stringify(error, null, 2));

        if (error.status === 403) {
            logger.warn('Rate limit exceeded. Check GitHub API rate limits.');
            throw new Error('GitHub API rate limit exceeded');
        } else if (error.status === 404) {
            logger.warn(`User ${username} not found on GitHub`);
            throw new Error(`GitHub user ${username} not found`);
        } else {
            throw new Error(`Failed to fetch GitHub repositories: ${error.message}`);
        }
    }
}

export default GitHubList;

================
File: processors/GitHubProcessorsFactory.js
================
import logger from '../../../../transmissions/src/utils/Logger.js';
import ns from '../../../../transmissions/src/utils/ns.js';
import GitHubList from './GitHubList.js';

class GitHubProcessorsFactory {
    static createProcessor(type, config) {
        if (type.equals(ns.t.GitHubList)) {
            return new GitHubList(config);
        }
        return false;
    }
}

export default GitHubProcessorsFactory;

================
File: .env.example
================
GITHUB_TOKEN=your_github_token_here

================
File: about.md
================
```sh
~/github-danny/trans-apps/applications/git-apps
repopack --verbose -c ../../repopack.config.json .
```

# Git Processors

there are more notes under

/home/danny/github-danny/transmissions/docs/postcraft-site/articles/new-application-walkthrough.md

/home/danny/github-danny/transmissions/docs/postcraft-site/articles/new-service-walkthrough.md

## Processors

### GitHubList

- Goal : list a user's personal repositories
- Implementation : a #Transmissions application using the `octokit` JS client libs
- SoftGoal : reusability
- _non-goal_ - efficiency

================
File: github-list-pipeline-runner.js
================
import path from 'path';
import { fileURLToPath } from 'url';
import TransmissionBuilder from '../../../transmissions/src/engine/TransmissionBuilder.js';
import GitHubProcessorsFactory from './processors/GitHubProcessorsFactory.js';
import AbstractProcessorFactory from '../../../transmissions/src/engine/AbstractProcessorFactory.js';
import logger from '../../../transmissions/src/utils/Logger.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

async function main() {
    logger.setLogLevel('debug');

    const transmissionConfigFile = path.join(__dirname, 'github-list-transmission.ttl');
    const processorsConfigFile = path.join(__dirname, 'processors-config.ttl');

    try {

        AbstractProcessorFactory.registerFactory('GitHubList', GitHubProcessorsFactory);

        const transmissions = await TransmissionBuilder.build(transmissionConfigFile, processorsConfigFile);

        const message = {
            github: { name: 'danja' }
        };

        for (const transmission of transmissions) {
            await transmission.execute(message);
        }
    } catch (error) {
        logger.error('Error:', error);
        logger.debug('Error details:', error.stack);
    }
}

main().catch(console.error);

================
File: github-list-runner.js
================
import GitHubList from './processors/GitHubList.js';
import logger from '../../../transmissions/src/utils/Logger.js';

async function main() {
    logger.setLogLevel('debug');

    const config = {};
    const githubList = new GitHubList(config);

    const message = {
        github: { name: 'danja' }
    };

    try {
        await githubList.execute(message);
        logger.log('GitHub repositories:', message.github.repositories);
    } catch (error) {
        logger.error('Error:', error.message);
    }
}

main().catch(console.error);

================
File: github-list-transmission.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> .
@prefix : <http://hyperdata.it/transmissions/> .

:github_list_pipeline a trm:Pipeline ;
    trm:pipe (:s1 :s2 :s3) .

:s1 a :GitHubList .
:s2 a :ShowMessage .
:s3 a :DeadEnd .

================
File: package.json
================
{
  "name": "git-apps",
  "version": "1.0.0",
  "type": "module",
  "main": "github-list-runner.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "@octokit/rest": "^21.0.2",
    "dotenv": "^16.4.5"
  }
}

================
File: processors-config.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> .
# @prefix fs: <http://purl.org/stuff/filesystem/> .
@prefix t: <http://hyperdata.it/transmissions/> . # for custom terms & instances

t:walkPrep a trm:ReMap ;
    trm:rename (t:pp1 t:pp2) . # consider using blank nodes
    t:pp1   trm:pre     "content" ;
            trm:post    "template"  .
    t:pp2   trm:pre     "entryContentMeta.sourceDir" ;
            trm:post    "sourceDir" .

================
File: transmissions.ttl
================
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix trm: <http://purl.org/stuff/transmission/> .
@prefix : <http://hyperdata.it/transmissions/> . # for custom terms & instances

#############################################################
# insert into pipe for debugging
:DE a :DeadEnd . # ends the current pipe quietly
:H  a :Halt . # kills everything 
:SC a :ShowConfig . # verbose report, continues pipe
:SM a :ShowMessage . # verbose report, continues pipe
:N  a :NOP . # no operation (except for showing stage in pipe)
:UF a :Unfork . # collapses all pipes but one 
#############################################################

:globbo a trm:Pipeline ;
    trm:pipe (:s10 :s20 :s30 :s40 :SM) .

#:s40 a :RemapContext ;
 #   trm:configKey :walkPrep .

:s10 a :DirWalker .
:s20 a :CaptureAll . # pushes all messages into config.whiteboard
:s30 a :Unfork .
:s40 a :WhiteboardToMessage .
